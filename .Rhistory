import openai
import os
##COMMENT UP THIS CODE!!!
with open('/home/pete/Documents/gpt_key.txt') as t:
openai.api_key = t.readlines()[0].strip("\n")
def get_completion(prompt, model="gpt-3.5-turbo", temperature = 0):
messages = [{"role": "user", "content": prompt}]
response = openai.ChatCompletion.create(
model=model,
messages=messages,
temperature=temperature, # this is the degree of randomness of the model's output
)
return response.choices[0].message["content"]
with open ("sample_job.txt") as f:
sample_job = f.readlines()
with open ("sample_cv.txt") as f:
sample_cv = f.readlines()
sample_cv =' '.join(sample_cv)
sample_job =' '.join(sample_job)
prompt = """Please compare the CV to the Job Description. Return the list of skills required in the Job description and state whether the CV matches them (as yes or no). CV:[""" + sample_cv + """] Job description: [""" + sample_job + """]"""
cv_match = get_completion(prompt)
print(cv_match)
with open ("sample_job.txt") as f:
sample_job = f.readlines()
with open ("sample_cv.txt") as f:
sample_cv = f.readlines()
sample_cv =' '.join(sample_cv)
sample_job =' '.join(sample_job)
prompt = """Please compare the CV to the Job Description. Return the list of skills required in the Job description and state whether the CV matches them (as yes or no). Make sure that the match is literal - for example if the job description specifies 'Agile', do not pass 'Scrum@ as matching. Only provide the list once. Wrtie the reply ina friendly tone, addressing the CV sender as to why they did not receive the interview they applied for and suggest improvements for the future. CV:[""" + sample_cv + """] Job description: [""" + sample_job + """]"""
cv_match = get_completion(prompt, temperature  = 0.5)
print(cv_match)
with open ("sample_job.txt") as f:
sample_job = f.readlines()
with open ("sample_cv.txt") as f:
sample_cv = f.readlines()
sample_cv =' '.join(sample_cv)
sample_job =' '.join(sample_job)
prompt = """Please compare the CV to the Job Description. Return the list of skills required in the Job description and state whether the CV matches them (as yes or no). Make sure that the match is literal - for example if the job description specifies 'Agile', do not pass 'Scrum@ as matching. Only provide the list once. Wrtie the reply ina friendly tone, addressing the CV sender as to why they did not receive the interview they applied for and suggest improvements for the future. Sign your reply with a random name and title of 'Automated HR assistant'. CV:[""" + sample_cv + """] Job description: [""" + sample_job + """]"""
cv_match = get_completion(prompt, temperature  = 0.5)
print(cv_match)
with open ("sample_job.txt") as f:
sample_job = f.readlines()
with open ("sample_cv.txt") as f:
sample_cv = f.readlines()
sample_cv =' '.join(sample_cv)
sample_job =' '.join(sample_job)
prompt = """Please compare the CV to the Job Description. Return the list of skills required in the Job description and state whether the CV matches them (as yes or no). Make sure that the match is literal - for example if the job description specifies 'Agile', do not pass 'Scrum@ as matching. Only provide the list once. Wrtie the reply in a friendly, supportive tone, addressing the CV sender as to why they did not receive the interview they applied for and suggest improvements for the future. Sign your reply with a random name and title of 'Automated HR assistant'. CV:[""" + sample_cv + """] Job description: [""" + sample_job + """]"""
cv_match = get_completion(prompt, temperature  = 0.5)
print(cv_match)
with open ("sample_job.txt") as f:
sample_job = f.readlines()
with open ("sample_cv.txt") as f:
sample_cv = f.readlines()
sample_cv =' '.join(sample_cv)
sample_job =' '.join(sample_job)
prompt = """Please compare the CV to the Job Description. Return the list of skills required in the Job description and state whether the CV matches them (as yes or no). Make sure that the match is literal - for example if the job description specifies 'Agile', do not pass 'Scrum@ as matching. Only provide the list once. Wrtie the reply in a friendly, supportive tone, addressing the CV sender as to why they did not receive the interview they applied for and suggest improvements for the future. Sign your reply as 'George, Automated HR assistant'. CV:[""" + sample_cv + """] Job description: [""" + sample_job + """]"""
cv_match = get_completion(prompt, temperature  = 0.5)
print(cv_match)
with open ("sample_job.txt") as f:
sample_job = f.readlines()
with open ("sample_cv.txt") as f:
sample_cv = f.readlines()
sample_cv =' '.join(sample_cv)
sample_job =' '.join(sample_job)
prompt = """Please compare the CV to the Job Description. Return the list of skills required in the Job description and state whether the CV matches them (as yes or no). Make sure that the match is literal - for example if the job description specifies 'Agile', do not pass 'Scrum@ as matching. Only provide the list once. Wrtie the reply in a friendly, supportive tone, addressing the CV sender as to why they did not receive the interview they applied for and suggest improvements for the future. Sign your reply as 'George, Automated HR assistant'. CV:[""" + sample_cv + """] Job description: [""" + sample_job + """]"""
cv_match = get_completion(prompt, temperature  = 0.75)
print(cv_match)
