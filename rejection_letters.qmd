---
title: "GPT rejection letters"
author: "Pete Jacobsson"
format: html
jupyter: python3
---

This project is about using GPT to write meaningful job rejection letters. The idea for the project came from an automated response from an application I did some time ago. The message was nice, and it was nice to receive something - but the thing that struck me was that they apologized for the reply being impersonal. So I thought - **Hey, it should be possible to not only personalize, but also build feedback into the reply**. With a connection to GPT the ATS might start working for both sides.


## Set up

I set up the GPT connection via the API using  the get_completion function, as discussed by Isa Fulford and Andrew NG in their deeplearning.ai course.

```{python}
import openai
import os

##COMMENT UP THIS CODE!!!
with open('/home/pete/Documents/gpt_key.txt') as t:
  openai.api_key = t.readlines()[0].strip("\n")


def get_completion(prompt, model="gpt-3.5-turbo", temperature = 0):
    messages = [{"role": "user", "content": prompt}]
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=temperature, # this is the degree of randomness of the model's output
    )
    return response.choices[0].message["content"]

```

Lets test if the function works

```{python}
prompt_conn_test = f"""Are there any hurricanes in Hampshire today?"""

response = get_completion(prompt_conn_test)
print(response)
```

So we have a connection. Now lets get a fictionalized job description and a CV.


## Job description
We can generate the job description using GPT:
```{python}
prompt_job_descript = f"""Could you please write a job description for a junior data analyst for the logistics sector? Please make sure to include a list of ten requirements. Please make sure that the description is less than 500 words long total. Please make sure that the ten requirements refer to specific technical, project management or language skills"""

job_description = get_completion(prompt_job_descript)
print(job_description)
```

Hence, we built ourselves a fictionalized job description. A little not on the prompt. I wanted to have a specific enough description to generate discrepencies from a random GPT-generated CV (which we will do in the next section). I also wanted the description to not be too long (mostly for my own sake - I don't feel like reading a 2,000 word fictitious job description). Last, on the first iteration, I didn't like the requirements section enough - they were a little "wooly" - not something that a traditional ATS could easily detect by scanning for keywords. Hence, I added the section asking GPT to return a specific skill list for the requirements. 


## Generate a sample CV

Again, I will rely on GPT for this. The original job description is one for a data analyst in a logistics sector. John Doe, our fictional rejectee will hold a Masters in economics and will have had three years experience as a data analyst in the retail sector. What Herbert will lack on his CV is evidence of knowledge of logistics, nothing on Excel, no programming languages. He will specify that he is a certified Scrum Master, but not mention project management explicitly. I might then throw in some additional curve balls into the prompt to get some more controlled clashes with the job description.

```{python}
prompt_cv = f"""Can you please generate a CV for one John Doe. John holds a Masters in economics from an Ivy League University. Since graduation he worked three years as a data anlyst within the retail sector. The CV is not to include any evidence of knowledge of logistics, does not include the word 'Excel', and has no mention of programming languages. The CV indicates that John is a Scrum master, but does not include terms 'agile' or 'project management'. Please fill in remaining details as you see fit. Please keep the CV to two pages A2. John is applying for a logistics data analyst post"""

cv_text = get_completion(prompt_cv, temperature = 0.5) #Added some variability to the responses.

print(cv_text)
```

```{python}
##Lets save the job description and the CV. This will allow keeping the number of API calls down, and makes the protype reproducible.
# with open('sample_job.txt', 'w') as sj:
#   sj.write(job_description)
# 
# with open('sample_cv.txt', 'w') as cv:
#   cv.write(cv_text)


```



## Use GPT to screen the sample CV

At this stage we have a CV and a job description. In the target workflow we would run the CV through an ATS, and use that to get a list of mis-matches. However, as I don't have access to a real ATS, I will once again use a GPT prompt instead.

```{python}
with open ("sample_job.txt") as f:
  sample_job = f.readlines()

with open ("sample_cv.txt") as f:
  sample_cv = f.readlines()


sample_cv =' '.join(sample_cv)
sample_job =' '.join(sample_job)

prompt = """Please compare the CV to the Job Description. Return the list of skills required in the Job description and state whether the CV matches them (as yes or no). Make sure that the match is literal - for example if the job description specifies 'Agile', do not pass 'Scrum@ as matching. Only provide the list once. Wrtie the reply in a friendly, supportive tone, addressing the CV sender as to why they did not receive the interview they applied for and suggest improvements for the future. Sign your reply as 'George, Automated HR assistant'. CV:[""" + sample_cv + """] Job description: [""" + sample_job + """]"""


cv_match = get_completion(prompt, temperature  = 0.5)
print(cv_match)


```






